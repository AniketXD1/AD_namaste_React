//#E1;
{
  /*<script>
      in this part we trying do is craeting html elment h1 and adding innerHTML text 
      through javascript and assecing root id and appendchild heading
      
We are creating an <h1> element in JavaScript, setting its inner text as "Hello World from JavaScript", then selecting the element with the id "root" from the HTML, and finally adding the <h1> element inside it using appendChild().

      const heading = document.createElement("h1");
      heading.innerHTML = "hello world from javascript";
      const root = document.getElementById("root");
      root.appendChild(heading);
    </script> 

#CDN Link
<!-- 
<script
  crossorigin
  src="https://unpkg.com/react@18/umd/react.development.js"
></script>
<script
  crossorigin
  src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"
></script> -->

#React basic how to create h1 tag in react

<!-- <script>

React.createElement ‚Üí creates a React element (h1 with text).

ReactDOM.createRoot ‚Üí selects the HTML element with id "root" as the container.

root.render ‚Üí displays the React element inside that container.

üëâ In simple words: React creates an element, finds the root box, and shows the element inside the page.


  const heading = React.createElement("h1", {}, "hello world from java script");
  const root = ReactDOM.createRoot(document.getElementById("root"));
  root.render(heading);

  root ‚Üí your variable ‚Üí ‚úÖ can rename.

createRoot ‚Üí React‚Äôs built-in function ‚Üí ‚ùå cannot rename.

üëâ You can change the variable name, but the React function name must stay the same.
</script> -->

#Nested Element

<!-- <div id="parent">
  <div id = "child">
    <h1>I am h1 tag</h1>
    <h2>I am h2 tag </h2>
  </div>
</div> 
how to create slibling ?
1. we have to pass one child and
2. convert into array pass to second child and create array of childern

ReactElement(object) => HTML (browser understands)


const parent = React.createElement(
  "div",
  { id: "parent" },
  React.createElement("div", { id: "child" }, [
    React.createElement("h1", {}, "I am h1 tag"),
    React.createElement("h2", {}, "I am h2 tag"),
  ])
);
console.log(parent);
const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(parent); 

this is core of react

we use this method last and we can use jsx for all code react



how to create parent childern

const parent = React.createElement("div", { id: "parent" }, [
  React.createElement("div", { id: "child1" }, [
    React.createElement("h1", {}, "I am h1 tag"),
    React.createElement("h2", {}, "I am h2 tag"),
  ]),
  React.createElement("div", { id: "child2" }, [
    React.createElement("h1", {}, "I am h1 tag"),
    React.createElement("h2", {}, "I am h2 tag"),
  ]),
]);

we have convert into array for that
-->

#E2

<!-- !all part in notes fill and only have theory  -->

#E3
<!--- // import React from "react";
// import ReactDOM from "react-dom/client";

// In this code show error that key error solution is below
// const parent = React.createElement("div", { id: "parent" }, [
//   React.createElement("div", { id: "child1" }, [
//     React.createElement("h1", {}, "I am h1 tag"),
//     React.createElement("h2", {}, "I am h2 tag"),
//   ]),
//   React.createElement("div", { id: "child2" }, [
//     React.createElement("h1", {}, "I am h1 tag"),
//     React.createElement("h2", {}, "I am h2 tag"),
//   ]),
// ]);
//  console.log(parent);
// const root = ReactDOM.createRoot(document.getElementById("root"));
// root.render(parent);

//*Error: Each child in a list should have a unique "key" prop.

// import React from "react";
// import ReactDOM from "react-dom/client";

// const parent = React.createElement("div", { id: "parent" }, [
//   React.createElement("div", { id: "child1", key: "child1" }, [
//     React.createElement("h1", { key: "h1-1" }, "Hii i am leraning react"),
//     React.createElement("h2", { key: "h2-1" }, "I am h2 tag"),
//   ]),
//   React.createElement("div", { id: "child2", key: "child2" }, [
//     React.createElement("h1", { key: "h1-2" }, "I am h1 tag"),
//     React.createElement("h2", { key: "h2-2" }, "I am h2 tag"),
//   ]),
// ]);

// const root = ReactDOM.createRoot(document.getElementById("root"));
// root.render(parent);

// import React from "react";
// import ReactDOM from "react-dom/client";

// React.createElement ==> ReactElement -JS Object ==> HTMLElement(render)

// This is core react

// const heading = React.createElement(
//   "h1",
//   { id: "heading" },
//   "Namaste React üöÄ"
// );
// const root = ReactDOM.createRoot(document.getElementById("root"));
// root.render(heading);

//*JSX - is not HTML in JS
//* JSX - HTML-like or XML-like syntax

// import React from "react";
// import ReactDOM from "react-dom/client";

//* JSX (transpiled before it reaches the JS ) - Parcel - Babel

//* JSX ==>Babel transpiles it to React.createElement ==> ReactElement -JS Object ==> HTMLElement(render)

// const jsxHeading = (
//   <h1 id="heading" className="root">
//     Namaste react using JSX üöÄ
//   </h1>
// );
// const root = ReactDOM.createRoot(document.getElementById("root"));
// root.render(jsxHeading);

// import React from "react";
// import ReactDOM from "react-dom/client";

// * React Element
// This is a normal react element
// const jsxHeading = (
//   <h1 id="heading" className="root">
//     Namaste react using JSX üöÄ
//   </h1>
// );

// * React Component

// Class Based Component - Old
// Functional Component - New

// * React Functional Component

//* syntax type function way write

//* 1

// const HeadingComponent = () => {
//   return <h1>Namaste React Functional Component</h1>;
// }; // both are same

//* 2
// This is a functional component
// const HeadingComponent2 = () => (
//   <div id="container">
//     <h1 className="heading">Namaste React Functional Component</h1>
//   </div>
// ); // both are same

// const root = ReactDOM.createRoot(document.getElementById("root"));
//!root.render(HeadingComponent2); we can not render like this
//!root.render(jsxHeading); We render react element not functional component

//! how we render  functional component ?

//! all the component render like this

// root.render(<HeadingComponent2 />); //this babel understand

//! let pay with code Q.suppose we have two  component in our code  ?
// import React from "react";
// import ReactDOM from "react-dom/client";
// const Title = () => (
//   <h1 id="heading" className="root">
//     Namaste react using JSX üöÄ
//   </h1>
// );
//! this is a component composition

// const HeadingComponent2 = () => (
//   <div id="container">
//     <Title /> another way to write this
//    <Title></Title>
//     {Title()}
// these three things are same thing
//  you can write any number time
//     <h1 className="heading">Namaste React Functional Component</h1>
//   </div>
// );

// const root = ReactDOM.createRoot(document.getElementById("root"));
// root.render(<HeadingComponent2 />);

//! IMP

//! What if I have put an element inside componenet ?
// import React from "react";
// import ReactDOM from "react-dom/client";

//! Q. How do you put a react element inside a react element ?
//! This is react element

// const elem = <span>react element</span>;

//! This is react element
// const title = (
//   <h1 id="heading" className="root">
//     {elem}
//     Namaste react using JSX üöÄ
//   </h1>
// );
//! This is functional component

// const HeadingComponent2 = () => (
//   <div id="container">
//     {title}
{
  /* IMP super power of JSX ----------------- In React, { } (curly braces) are super important!
They allow you to write JavaScript inside JSX.
You can write any javascript insideit.
and,
any JS expression

*/
}
//     <h1 className="heading">Namaste React Functional Component</h1>
//   </div>
// );

// const root = ReactDOM.createRoot(document.getElementById("root"));
// root.render(<HeadingComponent2 />);
