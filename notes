# frist episode #E1

<!-- <script>
      in this part we trying do is craeting html elment h1 and adding innerHTML text
      through javascript and assecing root id and appendchild heading

We are creating an <h1> element in JavaScript, setting its inner text as "Hello World from JavaScript", then selecting the element with the id "root" from the HTML, and finally adding the <h1> element inside it using appendChild().

      const heading = document.createElement("h1");
      heading.innerHTML = "hello world from javascript";
      const root = document.getElementById("root");
      root.appendChild(heading);
    </script> -->

#CDN Link

<!--
<script
  crossorigin
  src="https://unpkg.com/react@18/umd/react.development.js"
></script>
<script
  crossorigin
  src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"
></script> -->

# React basic how to create h1 tag in react

<!-- <script>

React.createElement ‚Üí creates a React element (h1 with text).

ReactDOM.createRoot ‚Üí selects the HTML element with id "root" as the container.

root.render ‚Üí displays the React element inside that container.

üëâ In simple words: React creates an element, finds the root box, and shows the element inside the page.


  const heading = React.createElement("h1", {}, "hello world from java script");
  const root = ReactDOM.createRoot(document.getElementById("root"));
  root.render(heading);

  root ‚Üí your variable ‚Üí ‚úÖ can rename.

createRoot ‚Üí React‚Äôs built-in function ‚Üí ‚ùå cannot rename.

üëâ You can change the variable name, but the React function name must stay the same.
</script> -->

# Nested Element

<!-- <div id="parent">
  <div id = "child">
    <h1>I am h1 tag</h1>
    <h2>I am h2 tag </h2>
  </div>
</div>
how to create slibling ?
1. we have to pass one child and
2. convert into array pass to second child and create array of childern

ReactElement(object) => HTML (browser understands)


const parent = React.createElement(
  "div",
  { id: "parent" },
  React.createElement("div", { id: "child" }, [
    React.createElement("h1", {}, "I am h1 tag"),
    React.createElement("h2", {}, "I am h2 tag"),
  ])
);
console.log(parent);
const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(parent);

this is core of react

we use this method last and we can use jsx for all code react



how to create parent childern

const parent = React.createElement("div", { id: "parent" }, [
  React.createElement("div", { id: "child1" }, [
    React.createElement("h1", {}, "I am h1 tag"),
    React.createElement("h2", {}, "I am h2 tag"),
  ]),
  React.createElement("div", { id: "child2" }, [
    React.createElement("h1", {}, "I am h1 tag"),
    React.createElement("h2", {}, "I am h2 tag"),
  ]),
]);

we have convert into array for that
-->

# -----------------------------------------------------------------------------------------

# second episode 2 notes #NPM

<!--

npm is everything but not node package manager.

In official website there is no place where it has writter that npm is node package manager.

npm does not have full form.

what is npm?
ans: basically npm manages packages.
NPM basically is a repisitory and standard for all the packages.
It's biggest package manager.
All the package are hosted there. -->

<!-- * Configuring the Project:

 npm init

 It creates a package.json file.
 Now to install parcel we will do:


 npm install -D parcel


 Now we will get a package-lock.json file. -->

# Note

<!-- note: the most important package in our project is a bundler. -->

# Type of dependencies

<!-- There are two type of packages or two type of dependencies that we can instll.

 1.dev dependencies.
 2.normal dependencies. -->

- package.json:
<!--
 Package.json file is a configuration for NPM. Whatever
packages our project needs, we install those packages using
npm install <packageName>.

  Once package installation is complete, their versions and
configuration related information is stored as dependencies
inside package.json file. -->

- package-lock.json:

<!-- Package-lock.json locks the exact version of packages being
used in the project. -->

Q . What is difference between package.json and package.lock.json?

<!-- In package. json we have information about generic version
of installed packages whereas in package.lock.json we have
information about the specific or exact version of
installed packages. -->

# .gitignore

<!-- git ignore help with some file you don't want to put into github.

example:

/node_modules

whatever you can regenerate don't put on git.

we can have essential things only lilk

1.package.json
2.package-lock.json


 -->

# npx parcel index.html

    Just like we have similarly to npm we have something known as npx.

    npm that just calling the command.

    npx that mean exeuting  a package.

# CDN link is not good way to get react and react-dom

  <!--
    <script
      crossorigin
      src="https://unpkg.com/react@18/umd/react.development.js"
    ></script>
    <script
      crossorigin
      src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"
    ></script> -->

# How to install react and react-dom as package.

# npm install react

# npm install react-dom

# npm i react-dom ( i = is short form of install)

# Q. how to ues reacr and react-dom in my code?

we have to ues keyword known as import

# old version

import React from "react";
import ReactDOM from "react-dom";

# new version

import React from "react";
import ReactDOM from "react-dom/client";

# comman error browser scripts can not have import and export.

# Error

    <script  src="/App.js"></script>

# Fix error

    <script type="module" src="/App.js"></script>

# Q. why your app is so fast ?

# how to create prod build

npx parcel build index.html

# gitignore

/dist
.parcel-cache

# how to make our app older version of browser

E2:1:59:30

# three episode notes #NPM

# Laying the Foundation!

# Q . What is another way of starting the build of the project? or

# what is script in react in package.json ?

In React, scripts are shortcut commands that make your life easier. Instead of typing long commands, you can just run:

"scripts": {
"start": "parcel index.html",
"build": "parcel build index.html",
},

# how to run commands ?

npm run start ---> another way to write npm start --->this work only for start not for build

npm run build ---> For Production Build.

# React.createElement => object => HTMLElement (render)

render----> it will replace everthing not append.

‚úÖ Simple way to remember:

React.createElement ‚Üí object (description)

render() ‚Üí converts object ‚Üí HTML and replaces everything in container

# JSX

Q What is JSX?
JSX is HTML-like or XML-like syntax. JSX stands for JavaScript
XML. It's a syntax extension for JavaScript

It is not a part of React. React apps can be built even
without JSX but the code will become very hard to read.
It is not HTML inside JavaScript.
JavaScript engine cannot understand JSX as it only
understands ECMAScript

# Note

You are writting code first for humans then for machines.

We do not use React.createElement form now on then we use from on is JSX

# Introducing Babel

# Q Is JSX a valid JavaScript?

The answer is yes and no.

JSX is not a valid Javascript syntax as it‚Äôs not pure HTML or
pure JavaScript for a browser to understand. JS does not have
built-in JSX. The JS engine does not understand JSX because
the JS engine understands ECMAScript or ES6+ code

# Q If the browser can‚Äôt understand JSX how is it still working?

This is because of Parcel because ‚ÄúParcel is a Beast‚Äù.
Before the code gets to JS Engine it is sent to Parcel and
Transpiled there. Then after transpilation, the browser gets the
code that it can understand.
Transpilation
‚áí
Converting the code in such a format that the
browsers can understand.
Parcel is like a manager who gives the responsibility of
transpilation to a package called Babel.
Babel is a package that is a compiler/transpiler of JavaScript
that is already present inside ‚Äònode-modules‚Äô. It takes JSX and
converts it into the code that browsers understand, as soon as
we write it and save the file. It is not created by Facebook.
Learn more about Babel on
babeljs.io
JSX (transpiled by Babel)
‚áí
React.createElement
‚áí
ReactElement
‚áí
JS Object
‚áí
HTML Element(render)

Q ) What is the difference between HTML and JSX?
JSX is not HTML. It‚Äôs HTML-like syntax.
HTML uses ‚Äòclass‚Äô property whereas JSX uses ‚ÄòclassName‚Äô
property
HTML can use hypens in property names whereas JSX uses
camelCase syntax.

# Note

If you have to give attributes to JSX.
You have to use camel case.
EX:
className
tabIndex

# Single Line and Multi Line JSX Code

Single line code:
const jsxHeading = <h1>Namaste React</h1>

# Multi-line code:

If writing JSX in multiple lines then using ‚Äò()‚Äô parenthesis is
mandatory. To tell Babel from where JSX is starting and ending.
const jsxHeading = (

 <div>
 <h1>Namaste React</h1>
 </div>
 );

# Note

1.  Use ‚ÄúPrettier - Code Formatter‚Äù VS Code Extension to
    make your code look beautiful with proper formatting
2.  Use ‚ÄúES lint‚Äù VS Code Extension for linting
3.  Use ‚ÄúBetter Comments‚Äù VS Code Extension to beautify
    your comments

# Introducing React Components

# IMP

# Q . What is react component ?

- Everything inside React is a component.
- Yes, that statemate is true but,
- Q ) What are Components?
  There are 2 types of components:
  1.Class-based Components - Old way of writing code, used rarely
  in industry
  2.Functional Components - New way of writing code, most commonly
  used

  # Note:

  nobady use class based component.
  new way coding we use Functional Components.

  # IMP Intrview Question might ask

  - function comonent uses javascript function to create component

  - Functional Components react Functional Components is just normal javascript function.

  - Whenever you create a functional component or any component, you should name it with a capital letter.

  const HeadingComponent1 = () => (
    <h1>Namaste</h1>
    )

  # Q ) What is a React Functional Components?

  It is just a JavaScript Function that returns some JSX or a
  react element.
  Always name React Functional Component with Capital Letters
  otherwise you will confuse it with normal function
  // All are the same for single-line code
  const HeadingComponent1 = () => (
   <h1>Namaste</h1>
   )

const HeadingComponent2 = () => {
return <h1>Namaste</h1>
}
const HeadingComponent3 = () => <h1>Namaste</h1>
To render a functional component we call them ‚Äò<Heading1 />‚Äô.
This is the syntax that Babel understands.
You can also call them using these ways,
‚Äò<Title></Title>‚Äô
or
‚Äò{Title()}‚Äô

# Note

Function component is normal JS Function reture some piece of jsx code or that reture
react element

# Components Composition

A component inside a component.
Calling a component inside another component is Component
Composition.
const Title = () => <h1>Namaste React</h1>
const HeadingComponent = () => (

 <div id="container">
 <Title />
 </div>
 )
 Code inside the ‚ÄòTitle‚Äô component will be used inside the 
‚ÄòHeadingComponent‚Äô component as the ‚ÄòTitle‚Äô component is called 
inside it. It will become something like this,

const HeadingComponent = () => (

 <div id="container">
 <h1>Namaste React</h1>
 </div>
 )

# Q ) How to use JavaScript code inside JSX?

Inside a React Component when ‚Äò{}‚Äô parenthesis is present we can
write any JavaScript expression inside it.
const number = 10000;
const HeadingComponent = () => (

 <div id="containter">
 {number}
 <h1>Namaste React</h1>
 </div>
 )

# Q ) How to call React Element in JSX?

We can use ‚Äò{}‚Äô parenthesis.
const elem = <span> React Element </span>
const HeadingComponent = () => (

 <div id="containter">

{elem}

 <h1>This is Namaste React</h1>
 </div>
 )

# Q ) What will happen if we call 2 elements inside each other?

If we put 2 components inside each other, then it will go into
an infinite loop and the stack will overflow. It will freeze
your browser, so it‚Äôs not recommended to do so

# Advantages of using JSX.

1.  Sanitizes the data
    If someone gets access to your JS code and sends some malicious
    data which will then get displayed on the screen, that attack is
    called cross-site scripting.
    It can read cookies, local storage, session storage, get
    cookies, get info about your device, and read data. JSx takes
    care of your data.
    If some API passes some malicious data JSX will escape it. It
    prevents cross-site scripting and sanitizes the data before
    rendering
2.  Makes code readable
    JSX makes it easier to write code as we are no longer creating
    elements using React.createElement()
3.  Makes code simple and elegant
4.  Show more useful errors and warnings
5.  JSX prevents code injections (attacks)

# -----------------------------------------------------------------------------------------

# Four episode #E4

# Talk is Cheap, Show me the Code!

- In this episode, we will start actual coding by starting a new
  project. Our app is going to a Food Ordering App.

# Planning for the UI

Before we start coding, plan things out. Planning will make
things easier to understand. We should know exactly what to
build:

- Name the App
- UI Structure

# Header

- Logo
- Nav Items

# Body

- Search
- Restaurant Container
  - Restaurant Card
    - Dish Name
    - Image
    - Restaurant Name
    - Rating
    - Cuisines
    - Time to Deliver

# Footer

- Copyright
- Links
- Address
- Contact

# Let‚Äôs start coding!

- so we have done one level of planning of our app.

- Keep that as a reference and start coding the app.

- You have to build your code modular beacuse,

- that your code are reoeating.

- we build separeate component for it.

- why ? whenever we can reused component.

- So always create a new component function.

# Main components = AppLayout

const AppLayout = () => {
return (

 <div className="app">
 <Header/>
 <Body/>
 </div>

)
}

# Header Component

const Header = () => {
return(

 <div className="header">
 <div className="logo-container">
 <img className="logo" src="url" />
 </div>
 <div className="nav-items">
 <ul>
 <li>Home</li>
 <li>About Us</li>
 <li>Contact Us</li>
 <li>Cart</li>
 </ul>
 </div>
 </div>
 )
 }

# Inline Styling

Writing the CSS along with the element in the same file. It is
not recommended to use inline styling. So you should avoid
writing it.

 <div 
className="red-card" 
style={{ backgroundColor: "#f0f0f0" }}
 >
<h3> Meghana Foods </h3>
 </div>
- In ‚Äòstyle={{ backgroundColor: "#f0f0f0" }}‚Äô, first bracket is to 
tell that whatever is coming next will be JavaScript and the 
second bracket is for JavaScript object

- or you can store the CSS in a variable and then use it

const styleCard = { backgroundColor: "#f0f0f0" };

 <div 
className="red-card" 
style={styleCard}
 >
 <h3> Meghana Foods </h3>
 </div>

# Introducing Props My Notes.

# (Q). How will we make my card dynamic?

# (Q). What if I have to create a dynamic card?

# ans : --->

- We have to use props.

- Props is a short from for Properties.

- Properties is something which you can pass to the component.

- Props are just normal javascript argument to a function.

- Props are a way to pass data from one component to another component.

- usually from a parent component to child component.

- passing a props to a component is just like passing an argument to a function.

- when you have pass a dynamically data to a component you have pass as props.

# note:-----> Good at this concept I.M.P

- important way to pass data inside app

# note:-----> how does data come from back-end into fornt-end -----> Json.

# Introducing Props lecture Notes.

Short form for properties. To dynamically send data to a
component we use props. Passing a prop to a function is like
passing an argument to a function.

- Passing Props to a Component

- Example,

  <RestaurantCard
   resName="Meghana Foods"
   cuisine="Biryani, North Indian"
  />

‚ÄòresName‚Äô and ‚Äòcuisine‚Äô a props and this is prop passing to a
component.

- Receiving props in the Component
  Props will be wrapped and send in Javascript object

- Example,

  const RestaurantCard = (props) => {
  return(
  <div>{props.resName}</div>
  )
  }

- Destructuring Props

- Example,
  const RestaurantCard = ({resName, cuisine}) => {
  return(
  <div>{resName}</div>
  )
  }

# Config Driven UI.
